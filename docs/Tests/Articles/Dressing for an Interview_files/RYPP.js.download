/*
Youtube Player with Playlist (v2.22)
https://github.com/carloscabo/responsive-youtube-player-with-playlist
by Carlos Cabo (@putuko)
*/

var RYPP = (function($, undefined) {
"use strict";

function Rypp(el, api_key, options) {
    // DOM Elements container
    this.DOM = {};
    // Default settings container
    this.options = {};
    // Data / urls
    this.data = {
    // Playlist url
        ytapi: {
            playlist_info: "https://www.googleapis.com/youtube/v3/playlists?part=snippet&id={{RESOURCES_ID}}&key={{YOUR_API_KEY}}",
            playlist: "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId={{RESOURCES_ID}}&key={{YOUR_API_KEY}}",
            pl_ID: "",
            videolist: "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,status,statistics,liveStreamingDetails&maxResults=50&id={{RESOURCES_ID}}&key={{YOUR_API_KEY}}"
        },
        temp_vl: [], // Temporary videolist
        firsttime: true,
        ismobile: typeof window.orientation !== "undefined",
        ispopulated: false
    };
    // Initialize
    this.init(el, api_key, options);
}

// Prototype for the instance
Rypp.prototype = {
    init: function(el, api_key, options) {
        // Api key
        this.api_key = api_key;
        // Default options
        this.options = {
            update_title_desc: false,
            autoplay: true,
            autonext: true,
            loop: false,
            mute: true,
            playable_region: false,
            debug: false
        };
        // Merge initial options
        if (typeof options !== "undefined") {
            $.extend(this.options, options);
        }
        // DOM elements
        this.DOM = {};
        this.DOM.$el = $(el);
        this.DOM.$playlc = this.DOM.$el.find(".RYPP-playlist");
        this.DOM.$items = this.DOM.$el.find(".RYPP-items");
        this.DOM.$videoc = this.DOM.$el.find(".RYPP-video");
        this.DOM.$title = this.DOM.$el.find(".RYPP-title");
        this.DOM.$desc = this.DOM.$el.find(".RYPP-desc");
        // YT Player object
        this.DOM.$el[0].ytplayer = null;
        // Unique player ID
        this.data.player_uid = Math.random()
            .toString(16)
            .substr(2, 8);
        this.DOM.$el
            .attr("data-rypp", this.data.player_uid)
            .find(".RYPP-video-player")
            .attr("id", "RYPP-vp-" + this.data.player_uid)
            .attr("name", "RYPP-vp-" + this.data.player_uid);
        if (this.options.debug)
            console.log("Unique ID: RYPP-vp-" + this.data.player_uid);
        // Link JS only once
        if (typeof window.YT === "undefined") {
            var tag = document.createElement("script"),
            hID = document.getElementsByTagName("head")[0];
            // Add youtube API in HEAD
            tag.src = "https://www.youtube.com/iframe_api?version=3";
            hID.appendChild(tag);
        } else {
            this.addAPIPlayer();
        }
    },

    onYTIframeAPIReadyCallback: function() {
        this.addAPIPlayer();
    },

    updateTitleDesc: function() {
        var me = this,
            resources_id = this.DOM.$el.attr("data-playlist"),
            url = this.data.ytapi.playlist_info
            .replace("{{RESOURCES_ID}}", resources_id)
            .replace("{{YOUR_API_KEY}}", this.api_key);

        $.ajaxSetup({ cache: false });
        $.ajax(url, {
            context: this,
            dataType: "json",
            crossDomain: true,
            error: function() {
            // Not successful
            },
            success: function(data) {
                this.DOM.$title.html(data.items[0].snippet.title);
                this.DOM.$desc.html(data.items[0].snippet.description);
            }
        });
    },

    populatePlaylist: function() {
        if (this.options.update_title_desc) {
            if (this.options.debug)
                console.log(this.data.player_uid + ": Updating playlist title / desc");
            this.updateTitleDesc();
        }
        // Empty playlist
        if (this.options.debug)
            console.log(this.data.player_uid + ": Populating playlist");
        this.DOM.$items.html("").append($("<ul class='rypp'>"));

        // Now we read the video list from playlist data or from IDs...
        if (this.DOM.$el.attr("data-playlist")) {
            this.data.pl_ID = this.DOM.$el.attr("data-playlist");
            this.getVideosFrom("playlist", this.data.pl_ID);
        } else if (this.DOM.$el.attr("data-ids")) {
            var vl = this.DOM.$el.attr("data-ids");
            // Clean spaces
            vl = $.map(vl.split(","), $.trim).join(",");
            this.getVideosFrom("videolist", vl);
        }
    },

    addAPIPlayer: function() {
        var me = this;

        window.YTConfig = { host: "https://www.youtube.com" };
        this.DOM.$el[0].ytplayer = new YT.Player(
            "RYPP-vp-" + me.data.player_uid, {
            playerVars: {
                // controls: 0,
                // showinfo: 0 ,
                autoplay: 1,
                html5: 1,
                enablejsapi: 1,
                rel: 0,
                modestbranding: 1,
                wmode: "transparent"
            },
            events: {
                onReady: function() {
                    if (me.options.debug)
                        console.log(me.data.player_uid + ": ytplayer ready");
                    me.onPlayerReady();
                },
                onStateChange: function(e) {
                    if (me.options.debug)
                        console.log(me.data.player_uid + ": statechange");
                    me.onPlayerStateChange(e);
                },
                onError: function(e) {
                    console.log('addAPIPlayer error: ', e);
                }
            }
            }
        );
    },

    // Ready to play
    onPlayerReady: function() {
        if (this.options.debug)
            console.log(this.data.player_uid + ": ytplayer ready callback");
        this.populatePlaylist();
    },

    // When video finish
    onPlayerStateChange: function(e) {
        var me = this;

        if (typeof e !== "undefined") {
            // On video loaded?
            if (e.data === -1 && this.data.firsttime) {
                if (!this.options.autoplay && !this.data.ismobile) {
                    // Is desktop
                    this.DOM.$el[0].ytplayer.stopVideo();
                    this.data.firsttime = false;
                }
                if (this.options.mute) {
                    this.DOM.$el[0].ytplayer.mute();
                }
            }

            // If mobile and stored in buffer we STOP the video in mobile devices
            if (e.data === 3 && this.data.ismobile && this.data.firsttime) {
                setTimeout(function() {
                    me.DOM.$el[0].ytplayer.stopVideo();
                    me.data.firsttime = false;
                }, 500);
            }

            // Play next only if not mobile
            var next = null;
            if (e.data === 0 && !this.data.ismobile && this.options.autonext) {
                next = this.DOM.$items.find("li.selected").next();
                if (next.length === 0 && this.options.loop) {
                    next = this.DOM.$items.find("li").first();
                }
                next.trigger("click");
                $(".RYPP-items").animate({ scrollTop: $(".RYPP-items").scrollTop()+this.DOM.$items.find("li.selected").offset().top - 82 }, { duration: 'medium', easing: 'swing' });
            }
        }
    },

    // Get video from data-ids or playlist
    // It's impossible to know if a video in a playlist its available or currently deleted. So that do 2 request, first we get all the video IDs an then we ask for info about them.
    getVideosFrom: function(kind, resources_id, page_token) {
        var me = this,
            url = this.data.ytapi[kind]
            .replace("{{RESOURCES_ID}}", resources_id)
            .replace("{{YOUR_API_KEY}}", this.api_key);

        if (typeof page_token !== "undefined") {
            url += "&pageToken=" + page_token;
        }
        if (this.options.debug)
            console.log('url: ', url);
        $.ajaxSetup({ cache: false });
        $.ajax(url, {
            context: this,
            dataType: "json",
            crossDomain: true,
            error: function() {
            // Not successful
            },
            success: function(data) {
                if (this.options.debug)
                    console.log('success: ', data);
                // We queried for a playlist
                if (data.kind === "youtube#playlistItemListResponse") {
                    var video_set = [];
                    // We get the video IDs and query gain, its the only way to be sure me all the videos are available, and not were deleted :(
                    $.map(data.items, function(val, idx) {
                        if (typeof val.snippet.resourceId.videoId !== "undefined") {
                            // Add video to temporary list
                            video_set.push(val.snippet.resourceId.videoId);
                        }
                    });
                    me.data.temp_vl.push(video_set);
                    if (this.options.debug)
                        console.log(video_set);
                    // If there are several pages we ask for next
                    if (typeof data.nextPageToken !== "undefined" && data.nextPageToken !== "") {
                        me.getVideosFrom(
                            "playlist",
                            me.data.pl_ID,
                            data.nextPageToken
                        );
                    } else {
                    // No more pages... we process the videos
                        for (var j = 0, len_pl = me.data.temp_vl.length; j < len_pl; j++) {
                            video_set = me.data.temp_vl.shift();
                            me.getVideosFrom("videolist", video_set.join(","));
                        }
                    }
                } else if (data.kind === "youtube#videoListResponse") {
                    var len_vl = data.items.length;
                    // Videos from  Videolist
                    for (var i = 0; i < len_vl; i++) {
                        var item = data.items[i];
                        // Videos without thumbnail, deleted or rejected are not included in the player!
                        if ($.inArray(item.status.uploadStatus, ["rejected","deleted","failed"]) === -1 && typeof item.snippet.thumbnails !== "undefined") {
                            var vid = item.id,
                                tit = item.snippet.title,
                                vct = item.statistics.viewCount,
                                pbd = item.snippet.publishedAt,
                                thu = item.snippet.thumbnails.default.url,
                                dur = item.contentDetails.duration.slice(2).replace('M',':').replace('S','');
                            me.addVideo2Playlist(vid, tit, vct, pbd, thu, dur, i);
                        }
                    }
                    if ($.isEmptyObject(me.data.temp_vl)) {
                        this.startPlayList();
                    }
                }
            }
        });
    },
    // All videos are supossed to be loaded - lets start the playlist
    startPlayList: function() {
        let D = this.DOM,
            vid = null,
            me = this,
            list = D.$items.find("ol"),
            listItems = D.$items.find("li");
        // Click on playlist elemnts
        D.$items.on("click", "li", function(e) {
            e.preventDefault();
            D.$items.find("li").removeClass("selected");
            D.$items.find("li").removeClass("upnext");
            $(this).addClass("selected");
            $(this).next().addClass('upnext');
            vid = $(this).data("video-id");
            // Call YT API function
            me.DOM.$el[0].ytplayer.cueVideoById(vid);
            // If we are in mobile we must stop
            if (me.data.ismobile) {
                me.data.firsttime = true;
            }
            $(".RYPP-items").animate({ scrollTop: $(".RYPP-items").scrollTop()+D.$items.find("li.selected").offset().top - 74 }, { duration: 'medium', easing: 'swing' });
        });
        // Select first if none
        if (D.$items.find("li.selected").length === 0) {
            if (this.options.autoplay) {
                let curr = $(D.$items.find("li").first());
                D.$items.find("li").removeClass("selected");
                D.$items.find("li").removeClass("upnext");
                curr.addClass("selected");
                curr.next().addClass('upnext');
                vid = curr.data("video-id");
                me.DOM.$el[0].ytplayer.loadVideoById(vid);
                //D.$items.find("li").first().click();
                // $(".RYPP-items").animate({ scrollTop: $(".RYPP-items").scrollTop()+D.$items.find("li").first().offset().top - 50 }, { duration: 'medium', easing: 'swing' });
            }
        }
    },

    // Add video block to playlist
    addVideo2Playlist: function(vid, tit, vct, pbd, thu, dur, idx) {
        var D = this.DOM,
            dr = 0,
            d = moment(),
            p = moment(pbd),
            dff = '';
        // Calculate the time ago
        if (dur.split(':').length > 1) {
            dr = moment().minute(dur.split(':')[0]).second(dur.split(':')[1]).format('m:ss');
        } else {
            dr = moment().minute(0).second(dur).format('m:ss');
        }
        if (d.diff(p,'days') > 365) {
            dff = d.diff(p,'years') + ' year';
            if (d.diff(p,'years') != 1)
                dff += 's';
        } else {
            if (d.diff(p,'days') > 60) {
                dff = d.diff(p,'months') + ' months';
            } else {
                dff = d.diff(p,'days') + ' day';
                if (d.diff(p,'days') != 1)
                    dff += 's';
            }
        }
        $('<li data-video-id="' + vid + '"><p class="title"><span>' + tit + '<br><small class="author">' + vct + ' views &middot ' + dff + ' ago</small></span></p><img src="' + thu + '" class="thumb" alt="' + tit + '"><span class="duration">' + dr + '</span></li>').appendTo(D.$items.find("ul"));
    }
}; // prototypes

return Rypp;
})(jQuery);

// YOUTUBE API CALLBACK
function onYouTubeIframeAPIReady() {
    // console.log( 'Youtube API script loaded. Start players.' );
    $("[data-rypp]").each(function(idx, el) {
        $(el)[0].rypp_data_obj.onYTIframeAPIReadyCallback();
    });
}

// JQuery hook
$.fn.rypp = function(api_key, options) {
    return this.each(function() {
        // Store object in DOM element
        this.rypp_data_obj = new RYPP(this, api_key, options);
    });
};

$.fn.isInViewport = function() {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();

    return elementBottom > viewportTop && elementTop < viewportBottom;
};
